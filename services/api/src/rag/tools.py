from __future__ import annotations

import json
from typing import Annotated, List, TypedDict

from pydantic import Field
from langchain_core.tools import tool

from .results import Result
from ..config import TAVILY_API_KEY
from ..http import HTTPSessionSingleton

__all__ = (
    "TOOLS",
)


class TavilySearchResult(TypedDict):
    title: Annotated[str, Field(description="The title of the search result.")]
    url: Annotated[str, Field(description="The URL of the search result.")]
    content: Annotated[str, Field(description="A short description of the search result.")]
    score: Annotated[float, Field(description="The relevance score of the search result.")]


class TavilyResponse(TypedDict):
    """Response for a search request from the Tavily API."""

    query: Annotated[str, Field(description="The search query that was executed.")]
    answer: Annotated[str, Field(description="A short answer to the user's query, generated by an LLM.")]
    results: Annotated[List[TavilySearchResult], Field(description="A list of sorted search results, ranked by relevancy.")]
    response_time: Annotated[float, Field(description="Time in seconds it took to complete the request.")]


@tool
async def search(query: str) -> Result[TavilyResponse]:
    """Search the Internet for real-time information"""
    http = HTTPSessionSingleton()
    await http.prepare()

    data = {
        "query": query,
        "topic": "general",
        "search_depth": "advanced",
        "max_results": 2,
        "include_answer": True,
        "include_raw_content": False,
        "include_images": False,
    }

    async with http.session.post(
        "https://api.tavily.com/search",
        headers={
            "Authorization": f"Bearer {TAVILY_API_KEY}",
            "Content-Type": "application/json",
        },
        data=json.dumps(data),
    ) as response:
        response.raise_for_status()
        return Result(result=await response.json(encoding="utf-8"))


@tool
def f(x: float) -> Result[float]:
    """Special function f"""
    return Result(result=x ** 2 - 1)


TOOLS = {
    "search": search,
    "f": f,
}